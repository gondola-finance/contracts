{
  "address": "0xA6e4d6067401471A3559D549d94E4FeA678fE1C3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "_masterChef",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "withUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "queuedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "executeAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "executeSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "executeSetRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "initAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "initMasterChefTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "initSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gondolaPerSec",
          "type": "uint256"
        }
      ],
      "name": "initSetRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardsQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gondolaPerSec",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "queuedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "setQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "queuedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferStartedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5dfa71abece6723b2157b901e9269e9542b9bb5a5a462b03c74a9e984ad84034",
  "receipt": {
    "to": null,
    "from": "0xBdA83B2F19Cc57DD910fb4b6E401001c6C53F773",
    "contractAddress": "0xA6e4d6067401471A3559D549d94E4FeA678fE1C3",
    "transactionIndex": 0,
    "gasUsed": "1554478",
    "logsBloom": "0x
    "blockHash": "0xdbd6e50d8e70cd556521a078b813ed9318a0da494b8a72a36cd2967692607194",
    "transactionHash": "0x5dfa71abece6723b2157b901e9269e9542b9bb5a5a462b03c74a9e984ad84034",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1723293,
        "transactionHash": "0x5dfa71abece6723b2157b901e9269e9542b9bb5a5a462b03c74a9e984ad84034",
        "address": "0xA6e4d6067401471A3559D549d94E4FeA678fE1C3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bda83b2f19cc57dd910fb4b6e401001c6c53f773"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdbd6e50d8e70cd556521a078b813ed9318a0da494b8a72a36cd2967692607194"
      }
    ],
    "blockNumber": 1723293,
    "cumulativeGasUsed": "1554478",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x34C8712Cc527a8E6834787Bd9e3AD4F2537B0f50"
  ],
  "solcInputHash": "99c5e3b563193ab395fdea283519a4d5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"queuedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"executeAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"executeSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"executeSetRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"initAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"initMasterChefTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"initSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gondolaPerSec\",\"type\":\"uint256\"}],\"name\":\"initSetRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gondolaPerSec\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"queuedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"queuedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferStartedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterChefProxy.sol\":\"MasterChefProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/MasterChefProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IMasterChef {\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) external;\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external;\\n\\n    function setRewards(\\n        uint256 _startAt,\\n        uint256 _endAt,\\n        uint256 _gondolaPerSec\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\\ncontract MasterChefProxy is Ownable {\\n    using SafeMath for uint256;\\n\\n    struct Add {\\n        uint256 allocPoint;\\n        IERC20 lpToken;\\n        bool withUpdate;\\n        bool executed;\\n        uint256 queuedAt;\\n    }\\n\\n    struct Set {\\n        uint256 pid;\\n        uint256 allocPoint;\\n        bool withUpdate;\\n        bool executed;\\n        uint256 queuedAt;\\n    }\\n\\n    struct SetRewards {\\n        uint256 startAt;\\n        uint256 endAt;\\n        uint256 gondolaPerSec;\\n        bool executed;\\n        uint256 queuedAt;\\n    }\\n\\n    IMasterChef public masterChef;\\n    uint256 public TRANSFER_DELAY = 14 * 24 * 3600;\\n    uint256 public DELAY = 2 * 24 * 3600;\\n    uint256 public transferStartedAt;\\n    address public transferTo;\\n    Add[] public addQueue;\\n    Set[] public setQueue;\\n    SetRewards[] public rewardsQueue;\\n\\n    constructor(IMasterChef _masterChef) public {\\n        masterChef = _masterChef;\\n    }\\n\\n    function initAdd(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        addQueue.push(\\n            Add({\\n                allocPoint: _allocPoint,\\n                lpToken: _lpToken,\\n                withUpdate: _withUpdate,\\n                executed: false,\\n                queuedAt: block.timestamp\\n            })\\n        );\\n        //\\n    }\\n\\n    function initSet(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        setQueue.push(\\n            Set({\\n                pid: _pid,\\n                allocPoint: _allocPoint,\\n                withUpdate: _withUpdate,\\n                executed: false,\\n                queuedAt: block.timestamp\\n            })\\n        );\\n        //\\n    }\\n\\n    function initSetRewards(\\n        uint256 _startAt,\\n        uint256 _endAt,\\n        uint256 _gondolaPerSec\\n    ) public onlyOwner {\\n        rewardsQueue.push(\\n            SetRewards({\\n                startAt: _startAt,\\n                endAt: _endAt,\\n                gondolaPerSec: _gondolaPerSec,\\n                executed: false,\\n                queuedAt: block.timestamp\\n            })\\n        );\\n    }\\n\\n    function executeAdd(uint256 id) public onlyOwner {\\n        Add memory add = addQueue[id];\\n        require(add.executed == false, \\\"already executed\\\");\\n        require(block.timestamp > add.queuedAt.add(DELAY), \\\"Too early\\\");\\n        addQueue[id].executed = true;\\n        masterChef.add(add.allocPoint, add.lpToken, add.withUpdate);\\n    }\\n\\n    function executeSet(uint256 id) public onlyOwner {\\n        Set memory set = setQueue[id];\\n        require(set.executed == false, \\\"already executed\\\");\\n        require(block.timestamp > set.queuedAt.add(DELAY), \\\"Too early\\\");\\n        setQueue[id].executed = true;\\n        masterChef.set(set.pid, set.allocPoint, set.withUpdate);\\n    }\\n\\n    function executeSetRewards(uint256 id) public onlyOwner {\\n        SetRewards memory setR = rewardsQueue[id];\\n        require(setR.executed == false, \\\"already executed\\\");\\n        require(block.timestamp > setR.queuedAt.add(DELAY), \\\"Too early\\\");\\n        rewardsQueue[id].executed = true;\\n        masterChef.setRewards(setR.startAt, setR.endAt, setR.gondolaPerSec);\\n    }\\n\\n    function initMasterChefTransfer(address to) public onlyOwner {\\n        transferStartedAt = block.timestamp;\\n        transferTo = to;\\n    }\\n\\n    function executeTransfer() public {\\n        require(\\n            owner() == _msgSender() || transferTo == _msgSender(),\\n            \\\"Ownable: caller is not the owner or future owner\\\"\\n        );\\n        require(\\n            block.timestamp > transferStartedAt.add(TRANSFER_DELAY),\\n            \\\"Too early\\\"\\n        );\\n        masterChef.transferOwnership(transferTo);\\n    }\\n}\\n\",\"keccak256\":\"0x8cfb57b6ac548967de1a27c12fa0184cce1032d86af3e5b7f8265e224f9d5f93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052621275006002556202a30060035534801561001e57600080fd5b50604051611a5d380380611a5d8339818101604052602081101561004157600080fd5b5051600061004d6100bc565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b03929092169190911790556100c0565b3390565b61198e806100cf6000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063d311ee5a11610081578063f2fde38b11610066578063f2fde38b146103ab578063fdf43754146103de578063ffd1d7a1146103fb57610151565b8063d311ee5a14610370578063e32326ff146103a357610151565b80638da5cb5b116100b25780638da5cb5b146102f3578063b87dc2e2146102fb578063c4a9881f1461034557610151565b8063715018a6146102e3578063835d2d2e146102eb57610151565b806341c62e2511610124578063575a86b211610109578063575a86b21461028957806369b41170146102915780636cd1b26c1461029957610151565b806341c62e25146102015780634df9532e1461022a57610151565b80631a0b80c1146101565780631ab5d260146101995780631ac3452b146101ca5780633f2d6fbf146101e4575b600080fd5b6101976004803603606081101561016c57600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201351690604001351515610418565b005b6101a1610628565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101d2610644565b60408051918252519081900360200190f35b610197600480360360208110156101fa57600080fd5b503561064a565b6101976004803603606081101561021757600080fd5b5080359060208101359060400135610947565b6102476004803603602081101561024057600080fd5b5035610afe565b6040805195865273ffffffffffffffffffffffffffffffffffffffff909416602086015291151584840152151560608401526080830152519081900360a00190f35b6101a1610b7f565b6101d2610b9b565b6102b6600480360360208110156102af57600080fd5b5035610ba1565b60408051958652602086019490945291151584840152151560608401526080830152519081900360a00190f35b610197610be5565b610197610ce2565b6101a1610e7a565b6103186004803603602081101561031157600080fd5b5035610e96565b60408051958652602086019490945284840192909252151560608401526080830152519081900360a00190f35b6101976004803603606081101561035b57600080fd5b50803590602081013590604001351515610eda565b6101976004803603602081101561038657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110a4565b6101d261117d565b610197600480360360208110156103c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611183565b610197600480360360208110156103f457600080fd5b50356112f0565b6101976004803603602081101561041157600080fd5b5035611584565b61042061180b565b73ffffffffffffffffffffffffffffffffffffffff1661043e610e7a565b73ffffffffffffffffffffffffffffffffffffffff16146104a6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805160a08101825293845273ffffffffffffffffffffffffffffffffffffffff92831660208501908152911515908401908152600060608501818152426080870190815260068054600181018255935295517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f60039093029283015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082018054935194517fffffffffffffffffffffffff000000000000000000000000000000000000000090941691909516177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000093151593909302929092177fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff167501000000000000000000000000000000000000000000911515919091021790915590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4190910155565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b61065261180b565b73ffffffffffffffffffffffffffffffffffffffff16610670610e7a565b73ffffffffffffffffffffffffffffffffffffffff16146106d8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6106e0611870565b600682815481106106ed57fe5b60009182526020918290206040805160a081018252600390930290910180548352600181015473ffffffffffffffffffffffffffffffffffffffff81169484019490945260ff74010000000000000000000000000000000000000000850481161515928401929092527501000000000000000000000000000000000000000000909304161580156060830152600290920154608082015291506107d7576040805162461bcd60e51b815260206004820152601060248201527f616c726561647920657865637574656400000000000000000000000000000000604482015290519081900360640190fd5b60035460808201516107e89161180f565b421161083b576040805162461bcd60e51b815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60016006838154811061084a57fe5b600091825260208083206001600390930201820180549415157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909516949094179093555483519284015160408086015181517f1eaaa045000000000000000000000000000000000000000000000000000000008152600481019690965273ffffffffffffffffffffffffffffffffffffffff92831660248701521515604486015251911692631eaaa04592606480830193919282900301818387803b15801561092b57600080fd5b505af115801561093f573d6000803e3d6000fd5b505050505050565b61094f61180b565b73ffffffffffffffffffffffffffffffffffffffff1661096d610e7a565b73ffffffffffffffffffffffffffffffffffffffff16146109d5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805160a081018252938452602084019283528301908152600060608401818152426080860190815260088054600181018255935294517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360059093029283015592517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee482015590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee582015590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee6820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee790910155565b60068181548110610b0b57fe5b600091825260209091206003909102018054600182015460029092015490925073ffffffffffffffffffffffffffffffffffffffff82169160ff7401000000000000000000000000000000000000000082048116927501000000000000000000000000000000000000000000909204169085565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60078181548110610bae57fe5b600091825260209091206004909102018054600182015460028301546003909301549193509160ff80821692610100909204169085565b610bed61180b565b73ffffffffffffffffffffffffffffffffffffffff16610c0b610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614610c73576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610cea61180b565b73ffffffffffffffffffffffffffffffffffffffff16610d08610e7a565b73ffffffffffffffffffffffffffffffffffffffff161480610d4c5750610d2d61180b565b60055473ffffffffffffffffffffffffffffffffffffffff9081169116145b610d875760405162461bcd60e51b81526004018080602001828103825260308152602001806119296030913960400191505060405180910390fd5b600254600454610d969161180f565b4211610de9576040805162461bcd60e51b815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600154600554604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201529051919092169163f2fde38b91602480830192600092919082900301818387803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60088181548110610ea357fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff9091169085565b610ee261180b565b73ffffffffffffffffffffffffffffffffffffffff16610f00610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614610f68576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805160a08101825293845260208401928352901515908301908152600060608401818152426080860190815260078054600181018255935294517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68860049093029283015592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a8201805493517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909416911515919091177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100931515939093029290921790915590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b90910155565b6110ac61180b565b73ffffffffffffffffffffffffffffffffffffffff166110ca610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614611132576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b42600455600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045481565b61118b61180b565b73ffffffffffffffffffffffffffffffffffffffff166111a9610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614611211576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166112635760405162461bcd60e51b81526004018080602001828103825260268152602001806119036026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6112f861180b565b73ffffffffffffffffffffffffffffffffffffffff16611316610e7a565b73ffffffffffffffffffffffffffffffffffffffff161461137e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61138661189e565b6007828154811061139357fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015493830193909352600283015460ff80821615159284019290925261010090041615801560608301526003909201546080820152915061143f576040805162461bcd60e51b815260206004820152601060248201527f616c726561647920657865637574656400000000000000000000000000000000604482015290519081900360640190fd5b60035460808201516114509161180f565b42116114a3576040805162461bcd60e51b815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600783815481106114b257fe5b6000918252602080832060049283020160020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100951515959095029490941790935560015484519385015160408087015181517f64482f790000000000000000000000000000000000000000000000000000000081529485019690965260248401919091529315156044830152925173ffffffffffffffffffffffffffffffffffffffff909316926364482f799260648084019391929182900301818387803b15801561092b57600080fd5b61158c61180b565b73ffffffffffffffffffffffffffffffffffffffff166115aa610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614611612576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61161a6118d1565b6008828154811061162757fe5b60009182526020918290206040805160a081018252600590930290910180548352600181015493830193909352600283015490820152600382015460ff161580156060830152600490920154608082015291506116cb576040805162461bcd60e51b815260206004820152601060248201527f616c726561647920657865637574656400000000000000000000000000000000604482015290519081900360640190fd5b60035460808201516116dc9161180f565b421161172f576040805162461bcd60e51b815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60016008838154811061173e57fe5b6000918252602080832060059290920290910160030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169315159390931790925560015483519284015160408086015181517ff36d1e4e0000000000000000000000000000000000000000000000000000000081526004810196909652602486019290925260448501919091525173ffffffffffffffffffffffffffffffffffffffff9091169263f36d1e4e92606480830193919282900301818387803b15801561092b57600080fd5b3390565b600082820183811015611869576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060a001604052806000815260200160008152602001600015158152602001600015158152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160001515815260200160008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572206f7220667574757265206f776e6572a2646970667358221220406ef096f2445fde765600092e2c07b721c1f43690733cb7c719b6c689739e8e64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063d311ee5a11610081578063f2fde38b11610066578063f2fde38b146103ab578063fdf43754146103de578063ffd1d7a1146103fb57610151565b8063d311ee5a14610370578063e32326ff146103a357610151565b80638da5cb5b116100b25780638da5cb5b146102f3578063b87dc2e2146102fb578063c4a9881f1461034557610151565b8063715018a6146102e3578063835d2d2e146102eb57610151565b806341c62e2511610124578063575a86b211610109578063575a86b21461028957806369b41170146102915780636cd1b26c1461029957610151565b806341c62e25146102015780634df9532e1461022a57610151565b80631a0b80c1146101565780631ab5d260146101995780631ac3452b146101ca5780633f2d6fbf146101e4575b600080fd5b6101976004803603606081101561016c57600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201351690604001351515610418565b005b6101a1610628565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101d2610644565b60408051918252519081900360200190f35b610197600480360360208110156101fa57600080fd5b503561064a565b6101976004803603606081101561021757600080fd5b5080359060208101359060400135610947565b6102476004803603602081101561024057600080fd5b5035610afe565b6040805195865273ffffffffffffffffffffffffffffffffffffffff909416602086015291151584840152151560608401526080830152519081900360a00190f35b6101a1610b7f565b6101d2610b9b565b6102b6600480360360208110156102af57600080fd5b5035610ba1565b60408051958652602086019490945291151584840152151560608401526080830152519081900360a00190f35b610197610be5565b610197610ce2565b6101a1610e7a565b6103186004803603602081101561031157600080fd5b5035610e96565b60408051958652602086019490945284840192909252151560608401526080830152519081900360a00190f35b6101976004803603606081101561035b57600080fd5b50803590602081013590604001351515610eda565b6101976004803603602081101561038657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110a4565b6101d261117d565b610197600480360360208110156103c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611183565b610197600480360360208110156103f457600080fd5b50356112f0565b6101976004803603602081101561041157600080fd5b5035611584565b61042061180b565b73ffffffffffffffffffffffffffffffffffffffff1661043e610e7a565b73ffffffffffffffffffffffffffffffffffffffff16146104a6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805160a08101825293845273ffffffffffffffffffffffffffffffffffffffff92831660208501908152911515908401908152600060608501818152426080870190815260068054600181018255935295517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f60039093029283015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082018054935194517fffffffffffffffffffffffff000000000000000000000000000000000000000090941691909516177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000093151593909302929092177fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff167501000000000000000000000000000000000000000000911515919091021790915590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4190910155565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b61065261180b565b73ffffffffffffffffffffffffffffffffffffffff16610670610e7a565b73ffffffffffffffffffffffffffffffffffffffff16146106d8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6106e0611870565b600682815481106106ed57fe5b60009182526020918290206040805160a081018252600390930290910180548352600181015473ffffffffffffffffffffffffffffffffffffffff81169484019490945260ff74010000000000000000000000000000000000000000850481161515928401929092527501000000000000000000000000000000000000000000909304161580156060830152600290920154608082015291506107d7576040805162461bcd60e51b815260206004820152601060248201527f616c726561647920657865637574656400000000000000000000000000000000604482015290519081900360640190fd5b60035460808201516107e89161180f565b421161083b576040805162461bcd60e51b815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60016006838154811061084a57fe5b600091825260208083206001600390930201820180549415157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909516949094179093555483519284015160408086015181517f1eaaa045000000000000000000000000000000000000000000000000000000008152600481019690965273ffffffffffffffffffffffffffffffffffffffff92831660248701521515604486015251911692631eaaa04592606480830193919282900301818387803b15801561092b57600080fd5b505af115801561093f573d6000803e3d6000fd5b505050505050565b61094f61180b565b73ffffffffffffffffffffffffffffffffffffffff1661096d610e7a565b73ffffffffffffffffffffffffffffffffffffffff16146109d5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805160a081018252938452602084019283528301908152600060608401818152426080860190815260088054600181018255935294517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360059093029283015592517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee482015590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee582015590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee6820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee790910155565b60068181548110610b0b57fe5b600091825260209091206003909102018054600182015460029092015490925073ffffffffffffffffffffffffffffffffffffffff82169160ff7401000000000000000000000000000000000000000082048116927501000000000000000000000000000000000000000000909204169085565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60078181548110610bae57fe5b600091825260209091206004909102018054600182015460028301546003909301549193509160ff80821692610100909204169085565b610bed61180b565b73ffffffffffffffffffffffffffffffffffffffff16610c0b610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614610c73576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610cea61180b565b73ffffffffffffffffffffffffffffffffffffffff16610d08610e7a565b73ffffffffffffffffffffffffffffffffffffffff161480610d4c5750610d2d61180b565b60055473ffffffffffffffffffffffffffffffffffffffff9081169116145b610d875760405162461bcd60e51b81526004018080602001828103825260308152602001806119296030913960400191505060405180910390fd5b600254600454610d969161180f565b4211610de9576040805162461bcd60e51b815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600154600554604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201529051919092169163f2fde38b91602480830192600092919082900301818387803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60088181548110610ea357fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff9091169085565b610ee261180b565b73ffffffffffffffffffffffffffffffffffffffff16610f00610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614610f68576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805160a08101825293845260208401928352901515908301908152600060608401818152426080860190815260078054600181018255935294517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68860049093029283015592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a8201805493517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909416911515919091177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100931515939093029290921790915590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b90910155565b6110ac61180b565b73ffffffffffffffffffffffffffffffffffffffff166110ca610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614611132576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b42600455600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045481565b61118b61180b565b73ffffffffffffffffffffffffffffffffffffffff166111a9610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614611211576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166112635760405162461bcd60e51b81526004018080602001828103825260268152602001806119036026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6112f861180b565b73ffffffffffffffffffffffffffffffffffffffff16611316610e7a565b73ffffffffffffffffffffffffffffffffffffffff161461137e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61138661189e565b6007828154811061139357fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015493830193909352600283015460ff80821615159284019290925261010090041615801560608301526003909201546080820152915061143f576040805162461bcd60e51b815260206004820152601060248201527f616c726561647920657865637574656400000000000000000000000000000000604482015290519081900360640190fd5b60035460808201516114509161180f565b42116114a3576040805162461bcd60e51b815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600783815481106114b257fe5b6000918252602080832060049283020160020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100951515959095029490941790935560015484519385015160408087015181517f64482f790000000000000000000000000000000000000000000000000000000081529485019690965260248401919091529315156044830152925173ffffffffffffffffffffffffffffffffffffffff909316926364482f799260648084019391929182900301818387803b15801561092b57600080fd5b61158c61180b565b73ffffffffffffffffffffffffffffffffffffffff166115aa610e7a565b73ffffffffffffffffffffffffffffffffffffffff1614611612576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61161a6118d1565b6008828154811061162757fe5b60009182526020918290206040805160a081018252600590930290910180548352600181015493830193909352600283015490820152600382015460ff161580156060830152600490920154608082015291506116cb576040805162461bcd60e51b815260206004820152601060248201527f616c726561647920657865637574656400000000000000000000000000000000604482015290519081900360640190fd5b60035460808201516116dc9161180f565b421161172f576040805162461bcd60e51b815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60016008838154811061173e57fe5b6000918252602080832060059290920290910160030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169315159390931790925560015483519284015160408086015181517ff36d1e4e0000000000000000000000000000000000000000000000000000000081526004810196909652602486019290925260448501919091525173ffffffffffffffffffffffffffffffffffffffff9091169263f36d1e4e92606480830193919282900301818387803b15801561092b57600080fd5b3390565b600082820183811015611869576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060a001604052806000815260200160008152602001600015158152602001600015158152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160001515815260200160008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572206f7220667574757265206f776e6572a2646970667358221220406ef096f2445fde765600092e2c07b721c1f43690733cb7c719b6c689739e8e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 664,
        "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5729,
        "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
        "label": "masterChef",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMasterChef)5689"
      },
      {
        "astId": 5736,
        "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
        "label": "TRANSFER_DELAY",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5743,
        "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
        "label": "DELAY",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5745,
        "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
        "label": "transferStartedAt",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5747,
        "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
        "label": "transferTo",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5750,
        "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
        "label": "addQueue",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Add)5705_storage)dyn_storage"
      },
      {
        "astId": 5753,
        "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
        "label": "setQueue",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Set)5716_storage)dyn_storage"
      },
      {
        "astId": 5756,
        "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
        "label": "rewardsQueue",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(SetRewards)5727_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Add)5705_storage)dyn_storage": {
        "base": "t_struct(Add)5705_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChefProxy.Add[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Set)5716_storage)dyn_storage": {
        "base": "t_struct(Set)5716_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChefProxy.Set[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SetRewards)5727_storage)dyn_storage": {
        "base": "t_struct(SetRewards)5727_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChefProxy.SetRewards[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1830": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChef)5689": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_struct(Add)5705_storage": {
        "encoding": "inplace",
        "label": "struct MasterChefProxy.Add",
        "members": [
          {
            "astId": 5696,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "allocPoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5698,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "lpToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)1830"
          },
          {
            "astId": 5700,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "withUpdate",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 5702,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "executed",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 5704,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "queuedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5716_storage": {
        "encoding": "inplace",
        "label": "struct MasterChefProxy.Set",
        "members": [
          {
            "astId": 5707,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "pid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5709,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5711,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "withUpdate",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 5713,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "executed",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 5715,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "queuedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SetRewards)5727_storage": {
        "encoding": "inplace",
        "label": "struct MasterChefProxy.SetRewards",
        "members": [
          {
            "astId": 5718,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "startAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5720,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "endAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5722,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "gondolaPerSec",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5724,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "executed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 5726,
            "contract": "contracts/MasterChefProxy.sol:MasterChefProxy",
            "label": "queuedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}